@using System.Text.Json;
@using Models;
@inject IJSRuntime JSRuntime

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Path</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <div>
        <label for="startBox">Starting location</label>
        <InputText id="startBox" @bind-Value="start" />
    </div>
    <div>
        <label for="endBox">End location</label>
        <InputText id="endBox" @bind-Value="end" />
    </div>
    <button @onclick="Submit">Submit</button>

    <AutoComplete OnLocationSelected="location => LocationSelected(location)"/>

    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private string? start, end;

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private IJSObjectReference? module;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./MapScript.js");
        }
    }

    async private void Submit()
    {
        if (start != null && end != null)
        {
            await module.InvokeVoidAsync("calculateRoute", start, end);
        } 
        else 
        {
            Console.WriteLine("input missing");
        }
    }

    public async Task LocationSelected(Location location)
    {
        await module.InvokeVoidAsync("calculateRoute", start, "");
    }

}